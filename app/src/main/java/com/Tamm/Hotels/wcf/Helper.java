package com.Tamm.Hotels.wcf;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.5.5.5
//
// Created by Quasar Development 
//
//---------------------------------------------------


import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.ISODateTimeFormat;
import org.ksoap2.serialization.AttributeContainer;
import org.ksoap2.serialization.AttributeInfo;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.kxml2.kdom.Element;
import org.kxml2.kdom.Node;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.UUID;


public class Helper {
    public static <T, E> T getKeyByValue(java.util.Map<T, E> map, E value) {
        for (java.util.Map.Entry<T, E> entry : map.entrySet()) {
            if (value.equals(entry.getValue())) {
                return entry.getKey();
            }
        }
        return null;
    }

    public static java.lang.Object getAttribute(AttributeContainer obj, java.lang.String name, java.lang.String namespace) {
        for (int i = 0; i < obj.getAttributeCount(); i++) {
            AttributeInfo info = new AttributeInfo();
            obj.getAttributeInfo(i, info);
            if (info.name.equals(name) && info.namespace.equals(namespace)) {
                return info.getValue();
            }
        }
        return null;
    }

    public static java.lang.String getId(java.lang.String text) {
        if (text.substring(0, 3).equalsIgnoreCase("cid")) {
            //started by cid:
            return text.substring(4);
        }
        //started by #
        return text.substring(1);
    }

    public static com.easywsdl.exksoap2.mtom.BinaryObject getBinary(java.lang.Object obj, boolean isSwaRef) {
        if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
            SoapPrimitive j = (SoapPrimitive) obj;
            if (j.toString() != null) {
                return new com.easywsdl.exksoap2.mtom.BinaryObject(org.kobjects.base64.Base64.decode(j.toString()));
            }
        } else if (obj != null && obj.getClass().equals(String.class)) {
            java.lang.String j = (java.lang.String) obj;
            if (j != null) {
                return new com.easywsdl.exksoap2.mtom.BinaryObject(org.kobjects.base64.Base64.decode(j));
            }
        } else if (obj != null && obj instanceof byte[]) {
            return new com.easywsdl.exksoap2.mtom.BinaryObject((byte[]) obj);
        } else if (obj != null && obj.getClass().equals(SoapObject.class)) {
            SoapObject j = (SoapObject) obj;
            if (j.getPropertyCount() > 0) {
                return getBinary(j.getProperty(0), isSwaRef);
            }
        } else if (obj instanceof com.easywsdl.exksoap2.mtom.SoapAttachment) {
            com.easywsdl.exksoap2.mtom.SoapAttachment attachment = (com.easywsdl.exksoap2.mtom.SoapAttachment) obj;
            com.easywsdl.exksoap2.mtom.BinaryObject binaryObj = new com.easywsdl.exksoap2.mtom.BinaryObject(attachment);
            binaryObj.contentType = attachment.mimeType;
            return binaryObj;
        }
        return null;
    }

    public static Element convertToHeader(java.lang.Object obj, java.lang.String namespace, java.lang.String name) {
        org.kxml2.kdom.Element parentElement = new org.kxml2.kdom.Element().createElement(namespace, name);
        if (obj == null) {
            return parentElement;
        }
        if (obj instanceof KvmSerializable) {
            KvmSerializable soapObject = (KvmSerializable) obj;
            for (int i = 0; i < soapObject.getPropertyCount(); i++) {
                PropertyInfo info = new PropertyInfo();
                soapObject.getPropertyInfo(i, new Hashtable(), info);
                java.lang.Object value = soapObject.getProperty(i);
                if (value != null && value != SoapPrimitive.NullSkip && value != SoapPrimitive.NullNilElement) {
                    info.setValue(value);
                    Element el1 = convertToHeader(info.getValue(), info.getNamespace(), info.getName());
                    parentElement.addChild(Node.ELEMENT, el1);
                }
            }
        } else if (obj != null && obj != SoapPrimitive.NullSkip && obj != SoapPrimitive.NullNilElement) {
            java.lang.String value = obj.toString();
            parentElement.addChild(org.kxml2.kdom.Node.TEXT, value);
        }
        return parentElement;
    }

    public static Element findOutHeader(java.lang.String name, SoapSerializationEnvelope envelope) {
        if (envelope.headerIn == null) {
            return null;
        }
        for (int i = 0; i < envelope.headerIn.length; i++) {
            Element elem = envelope.headerIn[i];
            if (elem.getName().equals(name) && (elem.getChildCount() > 0 || elem.getAttributeCount() > 0))
                return elem;
        }
        return null;
    }

    public static java.lang.Object convertToSoapObject(Element element) {
        if (element.getChildCount() == 0 || (element.getChildCount() == 1 && !(element.getChild(0) instanceof Element))) {
            SoapPrimitive primitive = new SoapPrimitive(element.getNamespace(), element.getName(), element.getChildCount() == 1 ? element.getText(0) : null);
            return primitive;
        } else {
            SoapObject obj = new SoapObject(element.getNamespace(), element.getName());
            for (int i = 0; i < element.getChildCount(); i++) {
                Element childElement = element.getElement(i);
                java.lang.Object childObject = convertToSoapObject(childElement);
                if (childObject instanceof SoapObject) {
                    SoapObject soapObj = (SoapObject) childObject;
                    obj.addProperty(soapObj.getName(), childObject);
                } else {
                    SoapPrimitive primitive = (SoapPrimitive) childObject;
                    obj.addProperty(primitive.getName(), primitive);
                }
            }
            return obj;
        }
    }

    public static org.joda.time.DateTime ConvertFromWebService(java.lang.String strDate) {
        DateTimeFormatter parser1 = ISODateTimeFormat.dateTimeParser();
        parser1 = parser1.withZoneUTC();
        return parser1.parseDateTime(strDate);
    }

    public static org.joda.time.LocalTime ConvertFromWebServiceTime(java.lang.String strTime) {
        DateTimeFormatter parser1 = ISODateTimeFormat.time();
        return parser1.parseLocalTime(strTime);
    }

    public static org.joda.time.LocalDate ConvertFromWebServiceDate(java.lang.String strTime) {
        try {
            DateTimeFormatter parser1 = ISODateTimeFormat.date();
            return parser1.parseLocalDate(strTime);
        } catch (java.lang.Exception ex) {
            DateTimeFormatter parser1 = org.joda.time.format.DateTimeFormat.forPattern("yyyy-MM-ddZ");
            return parser1.parseLocalDate(strTime);
        }
    }

    public static boolean isEmpty(CharSequence str) {
        return str == null || str.length() == 0;
    }

    public static ArrayList<PropertyInfo> getProperties(SoapObject soapObject, String name) {
        ArrayList<PropertyInfo> list = new ArrayList<PropertyInfo>();
        int size = soapObject.getPropertyCount();
        for (int i0 = 0; i0 < size; i0++) {
            PropertyInfo info = soapObject.getPropertyInfo(i0);
            if (info.name.equals(name)) {
                list.add(info);
            }
        }
        return list;
    }

    public static UUID emptyGuid() {
        return new UUID(0, 0);
    }
}