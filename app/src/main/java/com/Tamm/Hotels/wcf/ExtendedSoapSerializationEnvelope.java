package com.Tamm.Hotels.wcf;

//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 5.5.5.5
//
// Created by Quasar Development 
//
//---------------------------------------------------


import org.ksoap2.SoapEnvelope;
import org.ksoap2.serialization.MarshalFloat;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.kxml2.io.KXmlParser;
import org.kxml2.kdom.Element;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserFactory;
import org.xmlpull.v1.XmlSerializer;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Vector;

//If you have a compilation error here then you have to add a reference to ExKsoap2.jar to your project (you can find it in Libs folder in the generated zip file)
public class ExtendedSoapSerializationEnvelope extends com.easywsdl.exksoap2.serialization.ExSoapSerializationEnvelope {
    protected static final int QNAME_NAMESPACE = 0;
    private static final String TYPE_LABEL = "type";
    static HashMap<java.lang.String, java.lang.Class> classNames = new HashMap<java.lang.String, java.lang.Class>();
    static HashMap<java.lang.String, java.lang.String> elementNames = new HashMap<java.lang.String, java.lang.String>();

    static {
        classNames.put("http://TekTravel/HotelBookingApi^^RoomGuest", RoomGuest.class);
        classNames.put("http://TekTravel/HotelBookingApi^^Filters", Filters.class);
        classNames.put("http://TekTravel/HotelBookingApi^^GeoCodes", GeoCodes.class);
        classNames.put("http://TekTravel/HotelBookingApi^^AuthenticationData", AuthenticationData.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ResponseStatus", ResponseStatus.class);
        classNames.put("http://TekTravel/HotelBookingApi^^Hotel_Result", Hotel_Result.class);
        classNames.put("http://TekTravel/HotelBookingApi^^HotelInfo", HotelInfo.class);
        classNames.put("http://TekTravel/HotelBookingApi^^MinHotelPrice", MinHotelPrice.class);
        classNames.put("http://TekTravel/HotelBookingApi^^Rooms", Rooms.class);
        classNames.put("http://TekTravel/HotelBookingApi^^Hotel_Room", Hotel_Room.class);
        classNames.put("http://TekTravel/HotelBookingApi^^RoomRate", RoomRate.class);
        classNames.put("http://TekTravel/HotelBookingApi^^DayRate", DayRate.class);
        classNames.put("http://TekTravel/HotelBookingApi^^Supplement", Supplement.class);
        classNames.put("http://TekTravel/HotelBookingApi^^RoomInformation", RoomInformation.class);
        classNames.put("http://TekTravel/HotelBookingApi^^CancelPolicies", CancelPolicies.class);
        classNames.put("http://TekTravel/HotelBookingApi^^CancelPolicy", CancelPolicy.class);
        classNames.put("http://TekTravel/HotelBookingApi^^BookingOptions", BookingOptions.class);
        classNames.put("http://TekTravel/HotelBookingApi^^RoomCombination", RoomCombination.class);
        classNames.put("http://TekTravel/HotelBookingApi^^Guest", Guest.class);
        classNames.put("http://TekTravel/HotelBookingApi^^AddressInfo", AddressInfo.class);
        classNames.put("http://TekTravel/HotelBookingApi^^PaymentInfo", PaymentInfo.class);
        classNames.put("http://TekTravel/HotelBookingApi^^FlightInfo", FlightInfo.class);
        classNames.put("http://TekTravel/HotelBookingApi^^RequestedRooms", RequestedRooms.class);
        classNames.put("http://TekTravel/HotelBookingApi^^Rate", Rate.class);
        classNames.put("http://TekTravel/HotelBookingApi^^SuppInfo", SuppInfo.class);
        classNames.put("http://TekTravel/HotelBookingApi^^SpecialRequest", SpecialRequest.class);
        classNames.put("http://TekTravel/HotelBookingApi^^PriceChangeStatus", PriceChangeStatus.class);
        classNames.put("http://TekTravel/HotelBookingApi^^HotelCancellationPolicies", HotelCancellationPolicies.class);
        classNames.put("http://TekTravel/HotelBookingApi^^PriceVerification", PriceVerification.class);
        classNames.put("http://TekTravel/HotelBookingApi^^AccountInfo", AccountInfo.class);
        classNames.put("http://TekTravel/HotelBookingApi^^HotelDetailsVerification", HotelDetailsVerification.class);
        classNames.put("http://TekTravel/HotelBookingApi^^APIHotelDetails", APIHotelDetails.class);
        classNames.put("http://TekTravel/HotelBookingApi^^RoomInfo", RoomInfo.class);
        classNames.put("http://TekTravel/HotelBookingApi^^APIBookingDetail", APIBookingDetail.class);
        classNames.put("http://TekTravel/HotelBookingApi^^RoomDetails", RoomDetails.class);
        classNames.put("http://TekTravel/HotelBookingApi^^Supp_info", Supp_info.class);
        classNames.put("http://TekTravel/HotelBookingApi^^AmendmentDetails", AmendmentDetails.class);
        classNames.put("http://TekTravel/HotelBookingApi^^AgencyDetails", AgencyDetails.class);
        classNames.put("http://TekTravel/HotelBookingApi^^AOTNumbers", AOTNumbers.class);
        classNames.put("http://TekTravel/HotelBookingApi^^AmendmentRequestType", AmendmentRequestType.class);
        classNames.put("http://TekTravel/HotelBookingApi^^AmendInformation", AmendInformation.class);
        classNames.put("http://TekTravel/HotelBookingApi^^CheckInReq", CheckInReq.class);
        classNames.put("http://TekTravel/HotelBookingApi^^CheckOutReq", CheckOutReq.class);
        classNames.put("http://TekTravel/HotelBookingApi^^RoomReq", RoomReq.class);
        classNames.put("http://TekTravel/HotelBookingApi^^AmendGuestReq", AmendGuestReq.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ApprovalInformation", ApprovalInformation.class);
        classNames.put("http://TekTravel/HotelBookingApi^^RoomPriceRes", RoomPriceRes.class);
        classNames.put("http://TekTravel/HotelBookingApi^^TotalPrice", TotalPrice.class);
        classNames.put("http://TekTravel/HotelBookingApi^^AmendmentRequested", AmendmentRequested.class);
        classNames.put("http://TekTravel/HotelBookingApi^^CheckInRes", CheckInRes.class);
        classNames.put("http://TekTravel/HotelBookingApi^^CheckOutRes", CheckOutRes.class);
        classNames.put("http://TekTravel/HotelBookingApi^^RoomRes", RoomRes.class);
        classNames.put("http://TekTravel/HotelBookingApi^^AmendGuestRes", AmendGuestRes.class);
        classNames.put("http://TekTravel/HotelBookingApi^^CountryList", CountryList.class);
        classNames.put("http://TekTravel/HotelBookingApi^^CityList", CityList.class);
        classNames.put("http://TekTravel/HotelBookingApi^^Hotels", Hotels.class);
        classNames.put("http://TekTravel/HotelBookingApi^^HotelSearchWithRoomsFilters", HotelSearchWithRoomsFilters.class);
        classNames.put("http://TekTravel/HotelBookingApi^^Hotel_ResultWithRooms", Hotel_ResultWithRooms.class);
        classNames.put("http://TekTravel/HotelBookingApi^^BookingsBasedOnDate", BookingsBasedOnDate.class);
        classNames.put("http://TekTravel/HotelBookingApi^^GiataHotels", GiataHotels.class);
        classNames.put("http://TekTravel/HotelBookingApi^^TagInfos", TagInfos.class);
        classNames.put("http://TekTravel/HotelBookingApi^^CityWiseNotification", CityWiseNotification.class);
        classNames.put("http://TekTravel/HotelBookingApi^^HotelSearchResponse", HotelSearchResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^HotelRoomAvailabilityResponse", HotelRoomAvailabilityResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^HotelCancellationPolicyResponse", HotelCancellationPolicyResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^HotelBookResponse", HotelBookResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^AvailabilityAndPricingResponse", AvailabilityAndPricingResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^HotelBookingDetailResponse", HotelBookingDetailResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^GenerateInvoiceResponse", GenerateInvoiceResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^AmendmentResponse", AmendmentResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^HotelCancelResponse", HotelCancelResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^CountryListResponse", CountryListResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^DestinationCityListResponse", DestinationCityListResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^TopDestinationsResponse", TopDestinationsResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^HotelDetailsResponse", HotelDetailsResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^HotelCodesResponse", HotelCodesResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^HotelSearchWithRoomsResponse", HotelSearchWithRoomsResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^HotelBookingDetailBasedOnDateResponse", HotelBookingDetailBasedOnDateResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^GiataHotelCodesResponse", GiataHotelCodesResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^TagInfoResponse", TagInfoResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^CityWiseNotificationResponse", CityWiseNotificationResponse.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfRoomGuest", ArrayOfRoomGuest.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfInt", ArrayOfInt.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfHotel_Result", ArrayOfHotel_Result.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfRooms", ArrayOfRooms.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfHotel_Room", ArrayOfHotel_Room.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfDayRate", ArrayOfDayRate.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfSupplement", ArrayOfSupplement.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfString", ArrayOfString.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfString1", ArrayOfString1.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfString2", ArrayOfString2.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfGuest", ArrayOfGuest.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfRequestedRooms", ArrayOfRequestedRooms.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfSuppInfo", ArrayOfSuppInfo.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfSpecialRequest", ArrayOfSpecialRequest.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfString3", ArrayOfString3.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfString4", ArrayOfString4.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfImageUrlDetails", ArrayOfImageUrlDetails.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfRoomInfo", ArrayOfRoomInfo.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfString5", ArrayOfString5.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfString6", ArrayOfString6.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfRoomDetails", ArrayOfRoomDetails.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfSupp_info", ArrayOfSupp_info.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfRoomReq", ArrayOfRoomReq.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfRoomPriceRes", ArrayOfRoomPriceRes.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfRoomRes", ArrayOfRoomRes.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfCountryList", ArrayOfCountryList.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfCityList", ArrayOfCityList.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfHotels", ArrayOfHotels.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfHotel_ResultWithRooms", ArrayOfHotel_ResultWithRooms.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfBookingsBasedOnDate", ArrayOfBookingsBasedOnDate.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfGiataHotels", ArrayOfGiataHotels.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfAPIHotelDetails", ArrayOfAPIHotelDetails.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfTagInfos", ArrayOfTagInfos.class);
        classNames.put("http://TekTravel/HotelBookingApi^^ArrayOfCityWiseNotification", ArrayOfCityWiseNotification.class);
        elementNames.put("http://TekTravel/HotelBookingApi^^Credentials", "http://TekTravel/HotelBookingApi^^AuthenticationData");
    }

    public boolean createClassesForAny = false;

    public ExtendedSoapSerializationEnvelope() {
        this(SoapEnvelope.VER11);
    }

    public ExtendedSoapSerializationEnvelope(int soapVersion) {
        super(soapVersion);
        implicitTypes = true;
        setAddAdornments(false);
        mtomMode = MTOM_Automatic;
        new MarshalGuid().register(this);
        new MarshalFloat().register(this);
    }

    public static java.lang.Object getXSDType(java.lang.Object param) {
        if (param == null) {
            return null;
        }
        java.lang.Class obj = param.getClass();
        if (obj.equals(java.lang.String.class)) {
            return "string";
        }
        if (obj.equals(int.class) || obj.equals(java.lang.Integer.class)) {
            return "int";
        }
        if (obj.equals(float.class) || obj.equals(java.lang.Float.class)) {
            return "float";
        }
        if (obj.equals(double.class) || obj.equals(java.lang.Double.class)) {
            return "double";
        }
        if (obj.equals(java.math.BigDecimal.class)) {
            return "decimal";
        }
        if (obj.equals(short.class) || obj.equals(java.lang.Short.class)) {
            return "short";
        }
        if (obj.equals(long.class) || obj.equals(java.lang.Long.class)) {
            return "long";
        }
        if (obj.equals(boolean.class) || obj.equals(java.lang.Boolean.class)) {
            return "boolean";
        }
        java.lang.String xmlName = Helper.getKeyByValue(classNames, obj);
        if (xmlName == null) {
            return obj;
        }
        return xmlName;
    }

    @Override
    protected void writeProperty(XmlSerializer writer, java.lang.Object obj, PropertyInfo type) throws IOException {
        //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
        //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
        if (obj == null || obj == SoapPrimitive.NullNilElement) {
            writer.attribute(xsi, version >= VER12 ? NIL_LABEL : NULL_LABEL, "true");
            return;
        }
        if (writeReferenceObject(writer, obj)) {
            return;
        }
        java.lang.Object[] qName = getInfo(null, obj);
        if (!type.multiRef && qName[2] == null && !(obj instanceof com.easywsdl.exksoap2.mtom.BinaryObject)) {

            if (!implicitTypes || (obj.getClass() != type.type && !(obj instanceof Vector) && type.type != java.lang.String.class)) {
                java.lang.String xmlName = Helper.getKeyByValue(classNames, obj.getClass());
                if (xmlName != null) {
                    java.lang.String[] parts = xmlName.split("\\^\\^");
                    java.lang.String prefix = writer.getPrefix(parts[0], true);
                    writer.attribute(xsi, TYPE_LABEL, prefix + ":" + parts[1]);
                } else {
                    if (type.type instanceof String) {
                        java.lang.String xsdPrefix = writer.getPrefix(xsd, true);
                        java.lang.String myType = (java.lang.String) type.type;
                        java.lang.String[] parts = myType.split("\\^\\^");
                        if (parts.length == 2) {
                            xsdPrefix = writer.getPrefix(parts[0], true);
                            myType = parts[1];
                        }

                        writer.attribute(xsi, TYPE_LABEL, xsdPrefix + ":" + myType);
                    } else {
                        java.lang.String prefix = writer.getPrefix(type.namespace, true);
                        writer.attribute(xsi, TYPE_LABEL, prefix + ":" + obj.getClass().getSimpleName());
                    }

                }
            }
            //super.writeProperty(writer,obj,type);

            //!!!!! If you have a compilation error here then you are using old version of ksoap2 library. Please upgrade to the latest version.
            //!!!!! You can find a correct version in Lib folder from generated zip file!!!!!
            writeElement(writer, obj, type, qName[QNAME_MARSHAL]);
        } else {
            super.writeProperty(writer, obj, type);
        }
    }

    public SoapObject GetExceptionDetail(Element detailElement, java.lang.String exceptionElementNS, java.lang.String exceptionElementName) {
        int index = detailElement.indexOf(exceptionElementNS, exceptionElementName, 0);
        if (index > -1) {
            Element errorElement = detailElement.getElement(index);
            return GetSoapObject(errorElement);
        }
        return null;
    }

    public SoapObject GetSoapObject(Element detailElement) {
        try {
            XmlSerializer xmlSerializer = XmlPullParserFactory.newInstance().newSerializer();
            StringWriter writer = new StringWriter();
            xmlSerializer.setOutput(writer);
            detailElement.write(xmlSerializer);
            xmlSerializer.flush();

            XmlPullParser xpp = new KXmlParser();
            xpp.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, true);

            xpp.setInput(new StringReader(writer.toString()));
            xpp.nextTag();
            SoapObject soapObj = new SoapObject(detailElement.getNamespace(), detailElement.getName());
            readSerializable(xpp, soapObj);
            return soapObj;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }

    public java.lang.Object GetHeader(Element detailElement) {
        if (detailElement.getChildCount() > 0 && detailElement.getText(0) != null) {
            SoapPrimitive primitive = new SoapPrimitive(detailElement.getNamespace(), detailElement.getName(), detailElement.getText(0));
            return primitive;
        }

        return GetSoapObject(detailElement);
    }

    public PropertyInfo getAny(PropertyInfo info) {
        if (info == null) {
            return null;
        }
        try {
            java.lang.Class cl = null;
            if (createClassesForAny && info.getValue() instanceof SoapObject) {
                java.lang.String key = String.format("%s^^%s", info.getNamespace(), info.getName());
                if (elementNames.containsKey(key)) {
                    key = elementNames.get(key);
                }
                if (classNames.containsKey(key)) {
                    cl = classNames.get(key);
                }
                if (cl != null) {
                    java.lang.Object obj = createObject(info.getValue(), cl);
                    info.setValue(obj);
                }
            }
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
        }
        return info;
    }

    private Object createObject(Object soap, Class cl) throws InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {
        Object obj = cl.newInstance();
        Method ctor = obj.getClass().getMethod("loadFromSoap", Object.class, ExtendedSoapSerializationEnvelope.class);
        ctor.invoke(obj, soap, this);
        return obj;
    }

    public java.lang.Object get(java.lang.Object soap, java.lang.Class cl, boolean typeFromClass) {
        if (soap == null) {
            return null;
        }
        try {
            if (typeFromClass) {
                return createObject(soap, cl);
            }
            java.lang.Object refAttr = getReference(soap);
            if (refAttr != null) {
                return refAttr;
            } else {
                if (soap instanceof SoapObject) {
                    if (cl == SoapObject.class) {
                        return soap;
                    }
                    java.lang.String key = String.format("%s^^%s", ((SoapObject) soap).getNamespace(), ((SoapObject) soap).getName());
                    if (classNames.containsKey(key)) {
                        cl = classNames.get(key);
                    }
                }
                return createObject(soap, cl);
            }
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public java.lang.Object getSpecificType(java.lang.Object obj) {
        if (obj == null) {
            return null;
        }
        if (obj instanceof SoapObject) {
            SoapObject soapObject = (SoapObject) obj;
            java.lang.String key = soapObject.getNamespace() + "^^" + soapObject.getName();
            if (classNames.containsKey(key)) {
                java.lang.Class cl = classNames.get(key);
                try {
                    return createObject(soapObject, cl);
                } catch (java.lang.Exception e) {
                    e.printStackTrace();
                }
            }
        }

        return obj;
    }
} 

